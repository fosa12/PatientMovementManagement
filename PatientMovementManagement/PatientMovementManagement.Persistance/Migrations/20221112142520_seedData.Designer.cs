// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientMovementManagement.Persistance;

#nullable disable

namespace PatientMovementManagement.Persistance.Migrations
{
    [DbContext(typeof(PatientMovementDbContext))]
    [Migration("20221112142520_seedData")]
    partial class seedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.DayInWorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("WorkPlanId");

                    b.ToTable("DaysInWorkPlan");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 11, 12, 15, 25, 20, 103, DateTimeKind.Local).AddTicks(5311),
                            CreatedBy = "SYSTEM",
                            Position = "Lekarz",
                            Specialization = "Ortopeda",
                            StatusId = 1,
                            UserId = new Guid("98fa81c6-6138-46c2-b8f3-48423d8ba2b8")
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 11, 12, 15, 25, 20, 103, DateTimeKind.Local).AddTicks(5411),
                            CreatedBy = "SYSTEM",
                            Position = "Lekarz",
                            Specialization = "Chirurg ogólny",
                            StatusId = 1,
                            UserId = new Guid("de29efab-23ff-4bed-a8db-63f35ca033e5")
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 11, 12, 15, 25, 20, 103, DateTimeKind.Local).AddTicks(5424),
                            CreatedBy = "SYSTEM",
                            Position = "Lekarz",
                            Specialization = "Kardiolog",
                            StatusId = 1,
                            UserId = new Guid("d10e1087-20e1-447b-8345-6e9611afd586")
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 11, 12, 15, 25, 20, 103, DateTimeKind.Local).AddTicks(5434),
                            CreatedBy = "SYSTEM",
                            Position = "Lekarz",
                            Specialization = "Okulista",
                            StatusId = 1,
                            UserId = new Guid("ce6b5893-e96b-4205-8782-76054a2e3784")
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 11, 12, 15, 25, 20, 103, DateTimeKind.Local).AddTicks(5443),
                            CreatedBy = "SYSTEM",
                            Position = "Lekarz",
                            Specialization = "Onkolog",
                            StatusId = 1,
                            UserId = new Guid("b6d34076-64cd-4939-9a6e-35fa89938241")
                        });
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisitTookPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextVisitRecomended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("VisitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.WorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("WorkPlans");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.DayInWorkPlan", b =>
                {
                    b.HasOne("PatientMovementManagement.Domain.Entities.WorkPlan", "WorkPlan")
                        .WithMany("DaysInWorkPlan")
                        .HasForeignKey("WorkPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Visit", b =>
                {
                    b.HasOne("PatientMovementManagement.Domain.Entities.Employee", "Employee")
                        .WithMany("Visits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientMovementManagement.Domain.Entities.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.WorkPlan", b =>
                {
                    b.HasOne("PatientMovementManagement.Domain.Entities.Employee", "Employee")
                        .WithOne("WorkPlan")
                        .HasForeignKey("PatientMovementManagement.Domain.Entities.WorkPlan", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Visits");

                    b.Navigation("WorkPlan")
                        .IsRequired();
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("PatientMovementManagement.Domain.Entities.WorkPlan", b =>
                {
                    b.Navigation("DaysInWorkPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
